use std::str::FromStr;

use ast;

grammar;

pub Statements: Vec<ast::Statement> = {
    <s:(<Statement>)*> => s
};

Statement: ast::Statement = {
    <i:Include> => {
        let (file, path) = i;
        ast::Statement::Include(file, path)
    },
    <a:Assignment> => {
        let (path, val) = a;
        ast::Statement::Assign(path, val)
    },
};

Include: (String, Option<ast::Path>) = {
    "include" <s:Str> => (s.into(), None),
    "include" <s:Str> "as" <p:Path> => (s.into(), Some(p)),
};

Assignment: (ast::Path, ast::Value) = <p:Path> "=" <v:Value> => (p, v);

Path: ast::Path = <p: BasePath> => ast::Path {
    path_type: ast::PathType::Local,
    path: p
};

Link: ast::Path = <l:("self" ".")?> <p: BasePath> => ast::Path {
    path_type: if l.is_none() { ast::PathType::Global } else { ast::PathType::Local },
    path: p
};

BasePath: Vec<String> = <p:(<Ident>".")*> <last:Ident> => {
    let mut p = p;
    p.push(last);
    p
};

Ident: String = <i:r"[A-Za-z_]([A-Za-z_0-9]*)"> => i.into();

Value: ast::Value = {
    <n:Number> => ast::Value::Number(n),
    <s:Str> => ast::Value::String(s),
    <l:List> => ast::Value::List(l),
    <o:Object> => ast::Value::Object(o),
};

Object: ast::Object = {
    <p:Link> <t:Tuple> => ast::Object::Extension(p, Some(ast::ExtensionChanges::FunctionStyle(t))),
    <p:Link> <b:Block> => ast::Object::Extension(p, Some(ast::ExtensionChanges::BlockStyle(b))),
    <p:Link> => ast::Object::Extension(p, None),
    <b:Block> => ast::Object::New(b),
};

Tuple: Vec<ast::Value> = Comma<"(", ")">;

List: Vec<ast::Value> = Comma<"[", "]">;

Comma<O, C>: Vec<ast::Value> = O <l:(<Value> ",")*> <last:Value?> C => {
    let mut l = l;
    if let Some(last) = last {
        l.push(last);
    }
    l
};

Block: Vec<(ast::Path, ast::Value)> = "{" <l:(<Assignment>)*> "}" => l;

Number: ast::Number = {
    <n:Float> => ast::Number::Float(n),
    <n:Int> => ast::Number::Integer(n),
};

Int: i64 = <s:r"-?[0-9]+"> => s.parse().unwrap();
Float: f64 = <s:r"-?([0-9]+)\.([0-9]+)"> => s.parse().unwrap();
Str: String = <s:r#""[^"]*""#> => s[1..s.len()-1].into();
